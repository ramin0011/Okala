// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Crypto.Exchangerates.Models;
//
//    var apiResponse = ApiResponse.FromJson(jsonString);

namespace Crypto.Exchangerates.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ApiResponse
    {
        [JsonProperty("success", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Success { get; set; }

        [JsonProperty("timestamp", NullValueHandling = NullValueHandling.Ignore)]
        public long? Timestamp { get; set; }

        [JsonProperty("base", NullValueHandling = NullValueHandling.Ignore)]
        public string Base { get; set; }

        [JsonProperty("date", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Date { get; set; }

        [JsonProperty("rates", NullValueHandling = NullValueHandling.Ignore)]
        public Rates Rates { get; set; }
    }

    public partial class Rates
    {
        [JsonProperty("GBP", NullValueHandling = NullValueHandling.Ignore)]
        public long? Gbp { get; set; }

        [JsonProperty("JPY", NullValueHandling = NullValueHandling.Ignore)]
        public long? Jpy { get; set; }

        [JsonProperty("EUR", NullValueHandling = NullValueHandling.Ignore)]
        public long? Eur { get; set; }
    }

    public partial class ApiResponse
    {
        public static ApiResponse FromJson(string json) => JsonConvert.DeserializeObject<ApiResponse>(json, Crypto.Exchangerates.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ApiResponse self) => JsonConvert.SerializeObject(self, Crypto.Exchangerates.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
